var Cache = require('cache-args');
var CommitObj = require('commit-obj');
var Emitter = require('eventemitter2').EventEmitter2;
var help = require('help');
help.global.globalize();
globalize(help.propConstr);
globalize(help.func, Function.prototype);
globalize(help.Func, Function);

var Commit = module.exports = Function.create(function () {
	Emitter.call(this, {
	    wildcard: true,
	    newListener: true
	});
    
	return Cache(CommitObj);
    }, undefined, {
	prototype: Member(Object.create(Object.prototype, {
	    prototype: Member(Object.create(Emitter.prototype, {
		commit: Meth(function (obj, editedProps) {
		    this.commitObj(obj);
		    
		    this.oldProps = this.props;
		    var propListeners = this.listeners(['props', obj, '**']);
		    if (0 < propListeners.length) {
			this.getPropsAges(obj, props);
		    };
		    this.props = props;
		}),
		commitObj: Meth(function (obj) {
		    this.emit(['obj', obj]);
		}),
		commitProp: Meth(function (action, obj, prop) {
		    this.emit(['prop', obj, prop, action]);
		}),
		getPropsAges: Meth(function (obj, props) {
		    var oldProps = this.propsS[obj_];
		    
		    return {
			new: sift({$nin: oldProps}, props),
			mature: sift({$in: oldProps}, props),
			died: sift({$in: props}, oldProps)
		    };
		})
	    }))
	}))
    });

this.emit();