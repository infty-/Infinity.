var vows = require('vows');
var assert = require('assert');
var victim = require('help-func').global;
var Emitter = require('eventemitter2').EventEmitter2;

vows.describe('global').addBatch({
    'toNum(String)': {
	topic: function () {
	    return victim.toNum(String(12.34567890123456));
	},
	'is in same range as original float': function ($) {
	    assert.strictEqual(12, Math.floor($));
	}
    },
    'isInt(Number)': {
	topic: function () {
	    var results = {};
	    
	    for (var num = -51; num < 52; num += 0.75) {
		results[num] = victim.isInt(num);
	    };
	    
	    return results;
	},
	'are ints': function ($) { // TODO broken
	    for (var num in $) {
		var cmpMeth = 'is' + (num === Math.floor(num) ? 'Tru' : 'Fals') + 'e';
		assert[cmpMeth]($[num]);
	    }
	}
    },
    'callable(Native)': {
	topic: function () {
	    return [
		Function,
		RegExp,
		Math.floor,
		String.bind({})
	    ].map(function (nat_) {
		return victim.callable(nat_);
	    });
	},
	'are callable': function ($) {
	    assert.deepEqual($, $.map(function () {
		return true;
	    }));
	}

    }
}).run();