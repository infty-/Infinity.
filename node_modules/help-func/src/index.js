const PRIM_TYPES = ['undefined', 'boolean', 'number', 'string'];
var triggerCreator = function (getter, setter) {
	return Object.create(this.prototype, {
	    get: {
		value: getter
	    },
	    set: {
		value: setter
	    }
	});
    },
    getterCreator = function (getter) {
	return Object.create(this.prototype, {
	    get: {
		value: getter
	    }
	});
    };

var help = module.exports = {
	global: {
	    toNum: function (val) {
		return Number(String(val));
	    },
	    isInt: function (val) {
		return 0 === val % 1;
	    },
	    isI: function (val) {
		var parsee = glob.toNum(val);
		return glob.isInt(parsee) && parsee > -1;
	    },
	    callable: function (val) {
		return ('function' === typeof val);
	    },
	    isObj: function (val) {
		return !glob.isI(PRIM_TYPES.indexOf(typeof val)) && val; 
	    },
	    bindMeth: function (subj, key) {
		var args = Array.prototype.slice.call(arguments, 0);
		var bindings = [subj].concat(args.slice(2));
		var prop = subj[key];
		
		return prop.bind.apply(prop, bindings);
	    },
	    globalize: function (origin, dest) {
		origin = func.argIf.call(glob.isObj, origin, this);
		dest = func.argIf.call(glob.isObj, dest, global);
		for (var origin_Key in origin) {
		    var origin_ = origin[origin_Key];
		    dest[origin_Key] = origin_;
		};
	    },
	    dbg: function (mode) {
		if (mode) {
		    var args = Array.prototype.slice.call(arguments, 0);
		    var msgs = args.slice(1);
		    console.log.apply(undefined, msgs);
		};
	    }
	},
	propConstr: {
	    Meth: Object.defineProperties(function (val) {
		if (this instanceof propC.Meth) {
		    this.value = val;
		} else {
		    return new propC.Meth(val);
		}
	    }, {
		trigger: {
		    value: getterCreator
		}
	    }),
	    DynItem: Object.defineProperties(function (val) {
		if (this instanceof propC.DynItem) {
		    this.value = val;
		} else {
		    return new propC.DynItem(val);
		}
	    }, {
		prototype: {
		    value: {
			enumberable: {
			    value: true
			},
			configurable: {
			    value: true
			},
			writable: {
			    value: true
			}
		    }
		},
		trigger: {
		    value: triggerCreator
		}
	    }),
	    StatItem: Object.defineProperties(function (val) {
		if (this instanceof propC.StatItem) {
		    this.value = val;
		} else {
		    return new propC.StatItem(val);
		}
	    }, {
		prototype: {
		    value: {
			enumberable: {
			    value: true
			},
			writable: {
			    value: true
			}
		    }
		},
		trigger: {
		    value: triggerCreator
		}
	    }),
	    ConstItem: Object.defineProperties(function (val) {
		if (this instanceof propC.ConstItem) {
		    this.value = val;
		} else {
		    return new propC.ConstItem(val);
		}
	    }, {
		prototype: {
		    value: {
			enumberable: {
			    value: true
			}
		    }
		},
		trigger: {
		    value: getterCreator
		}
	    }),
	    Member: Object.defineProperties(function (val) {
		if (this instanceof propC.Member) {
		    this.value = val;
		} else {
		    return new propC.Member(val);
		}
	    }, {
		prototype: {
		    value: {
			writable: {
			    value: true
			}
		    }
		},
		trigger: {
		    value: triggerCreator
		}
	    })
	},
	func: {
	    argIf: function abc(arg, deflt) {
		function back () {
		    return deflt;
		}
		
		var args = Array.prototype.slice.call(arguments, 0);
		
		deflt = args.pop();
		
		return func.argBack.apply(this, args.concat([deflt]));
	    },
	    arg: function (arg) {
		this.apply(undefined, arguments);
		return arg;
	    },
	    argBack: function (arg, back) {
		var args = Array.prototype.slice.call(arguments, 0);
		
		back = args.pop();

		return this.apply(undefined, args) ? arg : back();
	    },
	    neg: function () {
		return !this.apply(undefined, arguments);
	    }
	},
	Func: {
	    create: function (src, proto, props) {
		var func = function () {
			return src.apply(this, arguments);
		    };
		func.__proto__ = 'undefined' !== typeof proto ? proto : Function.prototype;
		Object.defineProperties(func, props);
		
		return func;
	    }
	}
    },
    glob = help.global,
    func = help.func,
    Func = help.Func,
    propC = help.propConstr;