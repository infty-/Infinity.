var bindee = {};
bindee.__proto__ = Array.prototype;
bindee.toString = function () {return '--bin--';};

Object.prototype.toString = function () {
    return '--obj--';
}

var Constr = (function () {
	var IntConstr = function () {
		console.log('constr: ', String(this.constructor));
		console.log('proto: ', String(this.__proto__));
		console.log('this: ', String(this), '\n');
	    };
	
	IntConstr.toString = function () {return '--int--';};
	IntConstr.prototype.toString = function () {return '--int--';};
	
	return IntConstr;
    })().bind(bindee);
Constr.toString = function () {return '--public--';};
Constr.prototype = {
    toString: function () {return '--public--';}
};

console.log(' ');
console.log(Object.getOwnPropertyNames(Constr));

var inst = new Constr;
var res = Constr();
var meth = Constr.call(inst);
var call = Constr.call({});